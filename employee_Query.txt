--to add foriegn keys first we need to create a table consisting those attributes to link to another table
create table employee(
    emp_id int primary key,
    first_name varchar(40),
    last_name varchar(20),
    dob date,
    sex varchar(1),
    salary int,
    super_id int,
    branch_id int
);

desc employee;

create table branch(
    branch_id int primary key,
    branch_name varchar(30),
    mgr_id int,
    mgr_start_date date,
    foreign key(mgr_id) references employee(emp_id) on delete set NULL
);

desc branch;

alter table employee
add foreign key(branch_id)
references branch(branch_id)
on delete set NULL,
add foreign key(super_id)
references employee(emp_id)
on delete set NULL;

create table client(
    client_id int primary key,
    client_name varchar(40),
    branch_id int,
    foreign key(branch_id) references branch(branch_id) on delete set NULL
);

desc client;

create table works_with(
    emp_id int,
    client_id int,
    total_sales int,
    primary key(emp_id,client_id),
    foreign key(emp_id) references employee(emp_id) on delete cascade,
    foreign key(client_id) references client(client_id) on delete cascade   
);

desc works_with;

create table branch_supplier(
    branch_id int,
    supplier_name varchar(40),
    supply_type varchar(40),
    primary key(branch_id,supplier_name),
    foreign key(branch_id) references branch(branch_id) on delete cascade
);

desc branch_supplier;
select * from employee;
select * from branch; 
--Corporate
insert into employee VALUES(100,"David","Wallace",'1997-11-17',"M",250000,NULL,NULL);
insert into branch values(1,"Corporate",100,'2006-02-09');

update employee
set branch_id=1
where emp_id=100;

insert into employee values(101,"Jan","Levison",'1961-05-11',"F",110000,100,1);

--Scranton
insert into employee values(102,"michael","scott",'1964-03-15',"M",75000,NULL,NULL);
insert into branch values(2,"Scranton",102,'1992-04-06');

update employee
set branch_id=2
where emp_id=102;

update employee
set super_id=100
where emp_id=102;

insert into employee values(103,"angela","martin",'1971-06-25',"F",63000,102,2);
insert into employee values(104,"kelly","kapoor",'1980-02-05',"F",55000,102,2);
insert into employee values(105,"Stanley","hudson",'1958-02-19',"M",69000,102,2);

--Stamford
insert into employee values(106,"josh","porter",'1969-09-05',"M",78000,100,NULL);
insert into branch values(3,"stamford",106,'1998-02-13');

update employee
set branch_id=3
where emp_id=106;

insert into employee values(107,"andy","bernard",'1973-07-22',"M",65000,106,3),(108,"jim","halpert",'1978-10-01',"M",71000,106,3);

--branch supplier
INSERT INTO branch_supplier VALUES(2, 'Hammer Mill', 'Paper'),(3, 'Patriot Paper', 'Paper'),(2, 'J.T. Forms & Labels', 'Custom Forms'),(3, 'Uni-ball', 'Writing Utensils'),
(3, 'Hammer Mill', 'Paper'),(3, 'Stamford Lables', 'Custom Forms');
select * from branch_supplier;

--client
INSERT INTO client VALUES(400, 'Dunmore Highschool', 2),(401, 'Lackawana Country', 2),(402, 'FedEx', 3),(403, 'John Daly Law, LLC', 3),(404, 'Scranton Whitepages', 2),
(405, 'Times Newspaper', 3),(406, 'FedEx', 2);
select * from client;

--works_with
INSERT INTO works_with VALUES(105, 400, 55000),
(102, 401, 267000),(108, 402, 22500),(107, 403, 5000),(108, 403, 12000),(105, 404, 33000),
(107, 405, 26000),(102, 406, 15000),(105, 406, 130000);

desc works_with;
select * from employee;
select * from works_with;
delete from works_with;

--basic queries
select *
from employee
order by salary desc;

select *
from employee
order by sex,first_name,last_name;

select * from employee
limit 5;

select first_name as forename, last_name as surname
from employee;

select distinct emp_id
from employee;

--functions
select count(emp_id)
from employee;

select count(emp_id)
from employee
where sex='F' and dob>'1971-01-01';

select avg(salary)
from employee
where sex="M";

select sum(salary)
from employee;

--aggregation
select count(sex),sex
from employee
group by sex;

select sum(total_sales),emp_id
from works_with
group by emp_id;

select sum(total_sales),client_id
from works_with
group by client_id;

--wildcards
select * 
from client
where client_name like "%LLC";

select *
from branch_supplier
where supplier_name like "%Label%";

-- % = any number of characters and _ = single character

select * 
from employee
where dob like '____-10%';

--union 
-- 1)to use should have same number of columns in the select statements
-- 2)should have same datatyep in both the columns
select first_name as companny_names
from employee
UNION
select branch_name
from branch
UNION
select client_name
from client;

select client_name,client.branch_id --for a clear understanding of which table is the date being retrieved
from client
UNION
select supplier_name,branch_supplier.branch_id
from branch_supplier;

insert into branch values(4,"buffalo",NULL,NULL);

--joins, used to combine two or more rows of different tables based on a particular column
--inner join(combines tables based on a column)
select employee.emp_id,employee.first_name,employee.last_name,branch.branch_name
from employee
join branch
on employee.emp_id=branch.mgr_id;

--left join(includes all the information from the left table)
select employee.emp_id,employee.first_name,employee.last_name,branch.branch_name
from employee
left join branch
on employee.emp_id=branch.mgr_id;

--right join(includes all te information from the right table)
select employee.emp_id,employee.first_name,employee.last_name,branch.branch_name
from employee
right join branch
on employee.emp_id=branch.mgr_id;

--full outer join(combination of right and left join, not possible in sql :( )

--nested queries
select employee.first_name,employee.last_name
from employee
where employee.emp_id in(
    select works_with.emp_id
    from works_with
    where works_with.total_sales>30000
);

select client.client_name
from client
where client.branch_id=(
    select branch.branch_id
    from branch
    where branch.mgr_id=102
    limit 1
);

--on delete set null(sets null in the entry where the data in the main table and the foreign table has nothing) 
--and on delete cascade(deletes the entire row in the foreign key table)

--on delete set null(use when the attribute is only a foreign key)
delete from employee
where emp_id=102;
select * from branch;
select * from employee;

--on delete cascade(use for attribute which is both foreign key and primary key as primary key cannot have NULL)
delete from branch
where branch_id=2;
select * from branch_supplier;

--triggers(need to have a seperate delimiter other than ;(sql delimiter) to define the trigger)
--triggers are the statements of actions specified that happens in other table
--triggers should be executed in terminal only
create table trigger_test(
    message varchar(100)
);

delimiter &
create
    trigger trigger1 before insert
    on employee
    for each row begin
        insert into trigger_test values("added new employee");
    end &
delimiter;

insert into employee values(109,"oscar","martinez",'1968-02-19',"M",69000,106,3);

select * from trigger_test;

delimiter &
create
    trigger trigger2 before insert
    on employee
    for each row begin
        insert into trigger_test values(new.first_name);
    end &
delimiter;

insert into employee values(110,"kevin","malone",'1978-02-19',"M",69000,106,3);
delete from employee
where emp_id=110;
drop trigger employee.trigger2;

delete from trigger_test
where message="new.first_name";

delimiter &
create
    trigger trigger3 after insert
    on employee
    for each row begin
        if new.sex="M" then
            insert into trigger_test values("added male employee");
        elseif new.sex="F" then
            insert into trigger_test values("added female employee");
        else
            insert into trigger_test values("added other employee");
        end if;
    end &
delimiter;

insert into employee values(111,"pam","beesly",'1988-02-19',"F",69000,106,3);

